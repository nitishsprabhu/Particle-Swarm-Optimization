close all
clear all
clc

n = 30;                                 %Total number of agents
dim=3;                                  % Number of dimensions

pbest = 10*randn(dim , n);              % Stores one personal best position of every agent
v = 10*randn(dim , n);                  % Current Velocity 
x = 10*randn(dim , n);                  % Current Position

gbest = [1;1;1];                        % Best position at any given time
c1=1.43;                                   % Cognitive constant
c2=1/1.43;                                 % Social constant

count=0;                                
thresh=0.05;                            % Exit condition
iteration=0;

res = [4; 4 ;4];                        % Point of convergence

while count~= n 
    count=0;
    for i=1:n
        
        fitness = (x(1,i)-res(1,1)).^2 + (x(2,i)-res(2,1)).^2+ (x(3,i)-res(3,1)).^2;                    
        % Fitness function
        if fitness < ((pbest(1,i)-res(1,1)).^2+ (pbest(2,i)-res(2,1)).^2+ (pbest(3,i)-res(3,1)).^2 )
            pbest(:,i)=x(:,i);
        end
        % Comparision between present best and personal best
        if fitness < ((gbest(1,1)-res(1,1)).^2+ (gbest(2,1)-res(2,1)).^2+ (gbest(3,1)-res(3,1)).^2 )
            gbest=x(:,i);
        end
        % Comparision between global best and personal best
        v(:,i)= rand*v(:,i)+ (c1*rand*(pbest(:,i)- x(:,i)))+ (c2*rand*(gbest(:,1) - x(:,i)));
        % Updating velocity vector
        x(:,i) = x(:,i)+ v(:,i);
        % Updating position vector

        if fitness < thresh
            count=count+1;
        end
        % Compute terminating condiition

    end
    
    % Plot the data in the position vectors
    plot3(x(1,:),x(2,:),x(3,:),'b^', 'MarkerEdgeColor','k','MarkerFaceColor','b')
    grid on;
    axis([-5 10 -5 10 -5 10]);
    pause(0.1);
    
    % Count the number of iterations
    iteration = iteration+1;

end

disp('Total number of iterations required:  ');
disp(iteration);
close all
